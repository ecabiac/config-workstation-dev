---
version: '3.7'

services:
  zookeeper:
    #image: wurstmeister/zookeeper:latest
    image: zookeeper:3.6.1
    ports:
      - "2181:2181"
    networks:
      - mesh-overlay

  kafka:
    image: wurstmeister/kafka:2.12-2.5.0
    ports:
      - "9092:9092"
    networks:
      - mesh-overlay
    environment:
      #KAFKA_ADVERTISED_HOST_NAME: ${HOST_IP}
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: "topic-test:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  manager:
    image: obsidiandynamics/kafdrop:3.27.0
    networks:
      - mesh-overlay
      - edge-overlay
    ports:
      - target: 9000
        published: 9111
        protocol: tcp
        mode: host
    environment:
      KAFKA_BROKERCONNECT: kafka:9092,kafka:9094
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
    deploy:
      labels:
        SERVICE_IGNORE:

        # traefik v2 configs
        traefik.enable: "true"
        traefik.http.routers.kafdrop.entrypoints: http
        traefik.http.routers.kafdrop.service: kafdrop-service
        traefik.http.routers.kafdrop.rule: Host(`kafdrop.docker.devlocal`)
        traefik.http.services.kafdrop-service.loadbalancer.server.port: 9000



networks:
  edge-overlay:
    external: true
  mesh-overlay:
    external: true
